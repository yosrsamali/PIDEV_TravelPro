package tn.esprit.controllers.controllerAvis;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import tn.esprit.models.Avis;
import tn.esprit.services.ServiceAvis;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AvisCard {

    @FXML
    private VBox avisContainer;

    private final ServiceAvis serviceAvis = new ServiceAvis();

    // Liste des mots inappropri√©s suppl√©mentaires
    private final List<String> motsInappropri√©sSupplementaires = Arrays.asList("stupide", "idiot");

    @FXML
    public void initialize() {
        loadAvisNonAcceptes();
    }

    private void loadAvisNonAcceptes() {
        avisContainer.getChildren().clear(); // Nettoyer avant d'ajouter
        List<Avis> avisList = serviceAvis.getAvisNonAcceptes();

        for (Avis avis : avisList) {
            // V√©rifier si le commentaire contient des mots inappropri√©s
            verifierMotsInappropri√©s(avis.getCommentaire()).thenAccept(contientMotsInappropri√©s -> {
                HBox avisCard = createAvisCard(avis, contientMotsInappropri√©s);
                // Utiliser Platform.runLater pour mettre √† jour l'interface utilisateur
                Platform.runLater(() -> avisContainer.getChildren().add(avisCard));
            });
        }
    }

    private CompletableFuture<Boolean> verifierMotsInappropri√©s(String commentaire) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // Encoder le commentaire pour l'URL
                String commentaireEncode = URLEncoder.encode(commentaire, StandardCharsets.UTF_8);

                // URL de l'API PurgoMalum
                String url = "http://www.purgomalum.com/service/json?text=" + commentaireEncode;

                // Envoyer la requ√™te GET
                java.net.HttpURLConnection connection = (java.net.HttpURLConnection) new java.net.URL(url).openConnection();
                connection.setRequestMethod("GET");

                // Lire la r√©ponse
                int responseCode = connection.getResponseCode();
                if (responseCode == 200) {
                    try (java.io.BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream()))) {
                        String inputLine;
                        StringBuilder response = new StringBuilder();
                        while ((inputLine = in.readLine()) != null) {
                            response.append(inputLine);
                        }

                        // Extraire le commentaire filtr√© de la r√©ponse JSON
                        String jsonResponse = response.toString();
                        String commentaireFiltre = extraireCommentaireFiltre(jsonResponse);

                        // V√©rifier si des mots inappropri√©s ont √©t√© d√©tect√©s par PurgoMalum
                        boolean contientMotsInappropri√©s = commentaireFiltre.contains("***");

                        // V√©rifier les mots inappropri√©s suppl√©mentaires
                        if (!contientMotsInappropri√©s) {
                            contientMotsInappropri√©s = filtrerMotsSupplementaires(commentaireFiltre);
                        }

                        return contientMotsInappropri√©s;
                    }
                } else {
                    throw new RuntimeException("Erreur API : " + responseCode);
                }
            } catch (Exception e) {
                throw new RuntimeException("Erreur lors de l'appel √† l'API PurgoMalum : " + e.getMessage(), e);
            }
        });
    }

    private String extraireCommentaireFiltre(String jsonResponse) {
        // Exemple de r√©ponse JSON : {"result":"Ceci est un commentaire avec des *** !"}
        int startIndex = jsonResponse.indexOf("\"result\":\"") + 10;
        int endIndex = jsonResponse.lastIndexOf("\"");
        return jsonResponse.substring(startIndex, endIndex);
    }

    // M√©thode pour filtrer les mots inappropri√©s suppl√©mentaires
    private boolean filtrerMotsSupplementaires(String commentaire) {
        for (String mot : motsInappropri√©sSupplementaires) {
            if (commentaire.toLowerCase().contains(mot.toLowerCase())) {
                return true; // Le commentaire contient un mot inappropri√© suppl√©mentaire
            }
        }
        return false; // Aucun mot inappropri√© suppl√©mentaire trouv√©
    }

    private HBox createAvisCard(Avis avis, boolean contientMotsInappropri√©s) {
        HBox card = new HBox(10);
        card.setStyle("-fx-padding: 10; -fx-border-color: #ddd; -fx-border-radius: 5;");

        Label lblCommentaire = new Label("üìù " + avis.getCommentaire());
        Label lblNote = new Label("‚≠ê Note: " + avis.getNote());

        // Ajouter un message d'avertissement si des mots inappropri√©s sont d√©tect√©s
        if (contientMotsInappropri√©s) {
            Label lblAvertissement = new Label("‚ö†Ô∏è Ce commentaire contient des mots inappropri√©s");
            lblAvertissement.setStyle("-fx-text-fill: red;");
            card.getChildren().add(lblAvertissement);
        }

        Button btnAccepter = new Button("‚úÖ Accepter");
        btnAccepter.setOnAction(e -> {
            avis.setEstAccepte(true);
            serviceAvis.update(avis);
            loadAvisNonAcceptes();
        });

        Button btnSupprimer = new Button("üóëÔ∏è Supprimer");
        btnSupprimer.setOnAction(e -> {
            serviceAvis.delete(avis);
            loadAvisNonAcceptes();
        });

        card.getChildren().addAll(lblCommentaire, lblNote, btnAccepter, btnSupprimer);
        return card;
    }
}